
import React from 'react';
import {fireEvent, render, screen} from '@testing-library/react'
import '@testing-library/jest-dom'
import App from './App'


describe('BaÅŸlÄ±k/Header Testi',()=>{
    let emojiSearch;
    beforeEach(() =>{
        //App componenti render edilir
        render(<App/>)
        // Sayfa iÃ§erisinde Emoji Search yazÄ±sÄ± bulunur
        emojiSearch = screen.getByText('Emoji Search');
    })

    test('BaÅŸlÄ±k render edilmeli',()=>{
        // yazÄ± var mÄ± diye kontrol edilir.
        expect(emojiSearch).toBeInTheDocument();
    })
})

describe('Emoji listesini render testi.',()=>{
  let emojiList;
  beforeEach(() => {
      render(<App/>);
      // json iÃ§erisinden ilk 10 item kopyalanÄ±r.
      emojiList = [...document.querySelectorAll('.emoji-item')].slice(0, 10);
  })

  test('BaÅŸarÄ±lÄ± ÅŸekilde render edildiÄŸi test edilir.',()=> {
      // list iÃ§erisinde her item kontol edilir.
      emojiList.map((item)=>{
          expect(screen.getByText(item.title)).toBeInTheDocument();
      })
  })
})

describe('Emoji Filter',()=>{
  beforeEach(() => {
      render(<App/>);
  })

    test("Filtreleme Ã§alÄ±ÅŸmalÄ±", () => {
    const emoji = "Snowflake";
    const input = screen.getByRole("textbox");
    fireEvent.change(input, { target: { value: emoji } });

    expect(screen.getByText(emoji)).toBeInTheDocument();
  });
})

describe('Emoji kopyalanmalÄ±',()=>{
  let copyEmoji;

  beforeEach(()=>{
      render(<App/>)
      copyEmoji = screen.getByText('Grinning');
  })

  test('Emoji kopyalanabiliyor mu',()=>{
      // Emojiye tÄ±klandÄ±
      fireEvent.click(copyEmoji);
      // data-clipboard-text ğŸ˜€ bu deÄŸere sahip myi diye kontrol eder
      expect(copyEmoji.parentElement.getAttribute('data-clipboard-text')).toMatch('ğŸ˜€')
  })
})


